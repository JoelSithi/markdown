{"version":3,"sources":["sampleText.js","App.js","serviceWorker.js","index.js"],"names":["sampleText","App","state","text","handleChange","event","target","value","setState","renderText","__html","marked","sanitize","localStorage","getItem","this","setItem","className","onChange","row","dangerouslySetInnerHTML","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8SAAaA,EAAa,siBC6DXC,E,2MApDbC,MAAQ,CACNC,KAAMH,G,EAoBRI,aAAe,SAAAC,GACX,IAAMF,EAAOE,EAAMC,OAAOC,MAC3B,EAAKC,SAAS,CAACL,U,EAGlBM,WAAa,SAAAN,GAEX,MAAO,CAAEO,OADMC,IAAOR,EAAM,CAAES,UAAU,M,mFAtBxC,IAAMT,EAAOU,aAAaC,QAAQ,QAE7BX,EACHY,KAAKP,SAAS,CAAEL,SAEfY,KAAKP,SAAS,CAAEL,KAAMH,M,2CAKJ,IACbG,EAASY,KAAKb,MAAdC,KACRU,aAAaG,QAAQ,OAAQb,K,+BAe7B,OACE,yBAAKc,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,8BACCC,SAAaH,KAAKX,aAElBG,MAAQQ,KAAKb,MAAMC,KACnBc,UAAU,eACVE,IAAI,QAEP,yBAAKF,UAAU,YACb,yBAAKG,wBAAyBL,KAAKN,WAAWM,KAAKb,MAAMC,e,GA/CnDkB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0bc924d8.chunk.js","sourcesContent":["export const sampleText = '# Titre\\n## Sous-Titre \\n### Titre plus profond\\n \\nLes paragraphes sont séparés\\npar une ligne vide.\\n\\nLaissé deux espaces à la fin d\\'une ligne pour  \\naller à la ligne.\\n\\nAttributs *italique*, **gras**, \\n`monospace`, ~~rayé~~.\\n\\nListe:\\n\\n  * pommes\\n  * oranges\\n  * poires\\n\\nListe numérotée:\\n\\n  1. jambon\\n  2. cornichon\\n  3. pain\\n\\n *[Anthony Welc](https://www.youtube.com/channel/UChhPkjgG1-iLUOmURGdgQrw)* \\n\\n Lien automatique : https://www.facebook.com/anthonywelc/ \\n\\n```\\n console.log(\"hello\"); \\n``` '\n","import React, { Component } from 'react'\nimport './App.css'\nimport marked from 'marked'\nimport { sampleText } from './sampleText'\n\n\nclass App extends Component {\n\n  /*Creating State*/\n  state = {\n    text: sampleText\n  }\n  \n  componentDidMount () {\n    const text = localStorage.getItem('text')\n\n     if (text) {\n      this.setState({ text })\n     } else {\n       this.setState({ text: sampleText })\n     }\n  }\n  \n  /*Saving state with local storage*/\n  componentDidUpdate () {\n    const { text } = this.state\n    localStorage.setItem('text', text)\n  }\n \n  /*Handling events in textarea*/\n  handleChange = event => {\n      const text = event.target.value\n     this.setState({text})\n  }\n\n  renderText = text => {\n    const __html = marked(text, { sanitize: true})\n    return { __html} // ou return { __html: __html}\n  }\n\n  render () { \n    return (\n      <div className=\"container\">\n        <div className='row'>\n          <div className='col-sm-6'>\n            <textarea\n             onChange = { this.handleChange}\n             /*State managing the textarea*/\n             value={ this.state.text } \n             className='form-control' \n             row='35' />\n          </div>\n          <div className=\"col-sm-6\">\n            <div dangerouslySetInnerHTML={this.renderText(this.state.text)}></div>\n          </div>\n        </div>\n      </div>  \n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}